#!/usr/bin/env bash

###############################################################################

function usage(){
    echo "MDA: Multi Differential Abundance tool"
    echo "Usage: $0 [options] <count_data> <meta_data> <function> <outputprefix>"
    echo "  Options:"
    echo "    -a|--aldex2   : Run ALDex2"
    echo "    -A|--ancombc2 : Run ANCOMBC"
    echo "    -c|--corncob  : Run corncob"
    echo "    -d|--deseq2   : Run DESeq2"
    echo "    -l|--limma    : Run limma"
    echo "    -L|--lmclr    : Run lm CLR"
    echo "    -m|--maaslin2 : Run Maaslin2"
    echo "    -z|zicoseq    : Run ZicoSeq"
    echo "    --alpha       : Run alpha diversity test"
    echo "    --beta        : Run beta diversity test (permanova/adonis2)"
    echo "    --group       : Run an analysis on meta data a group variable (i.e. logistic regression) (e.g. CST/enterotypes etc.)"
    echo "                      Define the relevant column with: --options \"group.col='groupcol'\" "
    echo "    --continuous  : Run an analysis on meta data for a continuous variable (e.g. a score etc.)"
    echo "                      Define the relevant column with: --options \"continuous.cols=c('score1','score2')\" "
    echo "    --complement  : run the complement of the current selection"
    echo "                    (i.e. -c --complement would NOT run corncob)"
    echo "    -o|--options  : Arguments to the mda functions. Comma seperated."
    echo "                    (e.g. -o 'beta.permutations=10000')"
    echo "    --nocache     : Do not use a cache"
    echo "    --recache     : Re-do cached analyses"
    echo "    --help        : Display this help message"
    echo "  Inputs:"
    echo "    count_data : File path to a sample*taxa (rows*columns) tab separated file.
                           First column is sample IDs"
    echo "    meta_data  : File path to a sample*determinant (rows*columns) tab separated file.
                           First column is sample IDs"
    echo "    function   : Either a string in R formula format (e.g. ~ a + b + c), or
                           a file path to a line-separated list of these formulas"
    echo "    outputprefix : A path to a location of the outputs"

}

###############################################################################
# PROCESS INPUTS

ARGS=$(getopt -o 'aAcdlLmzo:' --long 'alpha,beta,group,continuous,aldex2,ancombc,corncob,deseq2,limma,lmclr,maaslin2,zicoseq,options:,complement,recache,nocache,help' -- "$@") || exit
eval "set -- $ARGS"

aldex2=0
ancombc2=0
corncob=0
deseq2=0
limma=0
lmclr=0
maaslin2=0
zicoseq=0
alpha=0
beta=0
group=0
continuous=0
all=1
complement=0
usecache="TRUE"
recache="FALSE"
fn_arguments=""
mdapackage="multidiffabundancedevel"

while true; do
    case $1 in
      (-a|--aldex2)
            all=0; aldex2=1; shift;;
      (-A|--ancombc2)
            all=0; ancombc2=1; shift;;
      (-c|--corncob)
            all=0; corncob=1; shift;;
      (-d|--deseq2)
            all=0; deseq2=1; shift;;
      (-l|--limma)
            all=0; limma=1; shift;;
      (-L|--lmclr)
            all=0; lmclr=1; shift;;
      (-m|--maaslin2)
            all=0; maaslin2=1; shift;;
      (-z|--zicoseq)
            all=0; zicoseq=1; shift;;
      (--alpha)
            all=0; alpha=1; shift;;
      (--beta)
            all=0; beta=1; shift;;
      (--group)
            all=0; group=1; shift;;
      (--continuous)
            all=0; continuous=1; shift;;
      (-o|--options)
            fn_arguments="$fn_arguments, $2"; shift 2;;
      (--complement)
            complement=1; shift;;
      (--nocache)
            usecache="FALSE"; shift;;
      (--recache)
            recache="TRUE"; shift;;
      (--help)
            usage $0; exit 1;;
      (--)
          shift; break;;
      (*)
          usage $0; exit 1;;           # error
    esac
done

if [ $complement -eq 1 ]; then
    aldex2=$((1-aldex2))
    ancombc2=$((1-ancombc))
    corncob=$((1-corncob))
    deseq2=$((1-deseq2))
    limma=$((1-limma))
    lmclr=$((1-lmclr))
    maaslin2=$((1-maaslin2))
    zicoseq=$((1-maaslin2))
fi

if [ $all -eq 1 ] ; then
    aldex2=1
    ancombc2=1
    corncob=0
    deseq2=1
    limma=1
    lmclr=1
    maaslin2=1
    zicoseq=1
    alpha=0
    beta=0
    group=0
    continuous=0
fi

#############################
# Deal with file inputs

remaining=("$@")

if [ ! "${#remaining[@]}" -eq 4 ]; then
    usage $0
    exit 1
fi

count_data=`realpath ${remaining[0]/#\~/$HOME}`
meta_data=`realpath ${remaining[1]/#\~/$HOME}`
formula=${remaining[2]}
outprefix=`realpath ${remaining[3]/#\~/$HOME}`

function check_if_exists_else_fail(){
    if [ ! -f "$1" ]; then
        echo "Error: File '$1' does not exist."
        exit $2;
    fi
}

check_if_exists_else_fail "$count_data" 2
check_if_exists_else_fail "$meta_data" 2

##################################
# Check formula input data

function check_if_is_formula(){
    echo "as.formula('$1')" | R --no-save &> /dev/null
    echo $?
}

if [ `check_if_is_formula "$formula"` -eq 1 ]; then
    formula=`realpath "${formula/#\~/$HOME}"`
    check_if_exists_else_fail "$formula" 2
fi


echo "library(multidiffabundance)
    raw.formula.data <- mda.load_formula_input('$formula')
    if(mda.verify_formula_input(raw.formula.data)){
        quit(save='no', status=0)}
    else {quit(save='no', status=1)}" | R --no-save &> /dev/null
if [ ! "$?" -eq 0 ]; then
    echo "ERROR: Please check your function input! (Do you have MDA installed?)"
    exit 1
fi

####################################
# Make output data

mkdir -p "$outprefix"

###############################################################################

function run_one_mda(){
    method=$1
    
    echo "[MDA] (`date`) RUNNING $method"
    mkdir -p "$outprefix/$method"

    rcode="
        library($mdapackage);
        library(readr);
        args = commandArgs(trailingOnly=TRUE);
        D <- mda.from_cmdargs(args, usecache=$usecache, recache=$recache ${fn_arguments});
        R <- mda.$method(D ${fn_arguments});
        write_tsv(R\$res, paste0(c(D\$outprefix, '$method/results.tsv'), collapse=''));
        write_tsv(R\$res.full, paste0(c(D\$outprefix, '$method/results.full.tsv'), collapse=''));
        saveRDS(R, paste0(c(D\$outprefix, '$method/results.rds'), collapse=''))
        warnings()
    "
    
    stdlog="$outprefix/$method/stdout"
    errlog="$outprefix/$method/stderr"
    retlog="$outprefix/$method/retval"
    
    rm -f "$stdlog" "$errlog" "retlog"

    ((Rscript <(echo "$rcode") "$count_data" "$meta_data" "$formula" "$outprefix/" ; echo >"$retlog" "$?") | tee "$stdlog") 3>&1 1>&2 2>&3 | tee $errlog
    
    result=`cat "$retlog"`

    if [ $result -eq 0 ]; then
        echo "[MDA] (`date`) COMPLETED $method. '$outprefix/$method/results.rds'"
    else
        echo "[MDA] (`date`) FAILED $method. See '$errlog'"
    fi
    return $result
    
}

declare -a result_files

if [ $aldex2 -eq 1 ] ; then
    run_one_mda aldex2 && result_files+=("$outprefix/aldex2/results.rds")
fi

if [ $ancombc2 -eq 1 ] ; then
    run_one_mda ancombc2 && result_files+=("$outprefix/ancombc2/results.rds")
fi

if [ $corncob -eq 1 ] ; then
    run_one_mda corncob && result_files+=("$outprefix/corncob/results.rds")
fi
    
if [ $deseq2 -eq 1 ] ; then
    run_one_mda deseq2 && result_files+=("$outprefix/deseq2/results.rds")
fi

if [ $limma -eq 1 ] ; then
    run_one_mda limma && result_files+=("$outprefix/limma/results.rds")
fi

if [ $lmclr -eq 1 ] ; then
    run_one_mda lmclr && result_files+=("$outprefix/lmclr/results.rds")
fi

if [ $maaslin2 -eq 1 ] ; then
    run_one_mda maaslin2 && result_files+=("$outprefix/maaslin2/results.rds")
fi

if [ $zicoseq -eq 1 ] ; then
    run_one_mda zicoseq && result_files+=("$outprefix/zicoseq/results.rds")
fi

if [ $alpha -eq 1 ] ; then
    run_one_mda alpha && result_files+=("$outprefix/alpha/results.rds")
fi

if [ $beta -eq 1 ] ; then
    run_one_mda beta && result_files+=("$outprefix/beta/results.rds")
fi

if [ $group -eq 1 ] ; then
    run_one_mda group && result_files+=("$outprefix/group/results.rds")
fi

if [ $continuous -eq 1 ] ; then
    run_one_mda continuous && result_files+=("$outprefix/continuous/results.rds")
fi


###############################################################################
# Combine all the outputs into one single output

#if [ "${#result_files[@]}" -gt 0 ]; then
    out_file="$outprefix/results"
    results=`for value in ${result_files[@]}; do echo $value; done | awk '{print "\"" $0 "\","}' | tr '\n' ' '`
    results=${results::-2}

    rcode="
        library('dplyr')
        library($mdapackage)

        rf <- c($results)
        rs <- lapply(rf, readRDS)
        comb <- mda.merge_results(rs)
        
        saveRDS(comb, file='${outprefix}/${out_file}.rds')
        write_tsv(comb\$res,      '${outprefix}/${out_file}.tsv')
        write_tsv(comb\$res.full, '${outprefix}/${out_file}.full.tsv')
    "
    Rscript <(echo "$rcode")

#
#    echo "[MDA] (`date`) OUTPUT '$out_file'"
#else
#    echo "[MDA] (`date`) NO OUTPUT"
#fi

###############################################################################